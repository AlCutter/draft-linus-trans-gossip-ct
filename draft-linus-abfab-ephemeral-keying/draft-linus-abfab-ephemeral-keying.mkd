---
title: Ephemeral keying for ABFAB
docname: draft-linus-abfab-ephemeral-keying-00
date: 2014-02-13
category: info
pi: [toc, sortrefs, symrefs]
ipr: trust200902
area: Security
wg: ABFAB
kw: Internet-Draft

author:
  -
    ins: L. Nordberg
    name: Linus Nordberg
    email: linus@nordu.net
    org: NORDUnet
  -
    ins: J. Howlett
    name: Josh Howlett
    email: Josh.Howlett@ja.net
    org: JANET(UK)

normative:
  RFC2743:
  RFC3748:
  RFC4282:
  RFC7055:
  I-D.ietf-abfab-arch:

--- abstract

This document describes how EAP-GSS provides forward secrecy by
encrypting each session in an ephemeral key generated in the initial
state of the context establishment. This Diffie-Hellman key is shared
by the initiator (EAP peer) and acceptor (EAP authenticator).

The goal is to stop a passive attacker with access to the traffic
between an ABFAB user and the service she uses (Relying Party), from
getting access to key material and information linkable to the user or
from being able to fingerprint the user.

--- middle

Introduction {#problems}
============

The ABFAB architecture {{I-D.ietf-abfab-arch}} defines a GSS-API
mechanism for the Extensible Authentication Protocol {{RFC7055}}. This
mechanism provides support for the security services offered by the
GSS-API, including the confidentiality of context tokens. This
confidentiality service is available once a GSS context has been
negotiated successfully between the initiator and acceptor.

However there is a possibility that a passive observer could extract
information from this negotiation that could potentially compromise
aspects of the confidentiality of the context tokens and/or the
privacy of the initiator and/or acceptor.

This document defines an extension to {{RFC7055}} to deny a passive
observer access to this information by encrypting the tokens used to
establish the GSS context.


Information potentially accessible to a passive observer {#passive-access}
========================================================

This section describes the information available to a passive observer
of an {{RFC7055}} negotiation between an initiator and acceptor,
working from the lowest layers of the protocol stack upwards.

RADIUS
------

The realm component of the NAI {{RFC4282}} is generally exposed. While
the user name component of the NAI is easily anonymised, the realm
(which effectively names the user's identity provider (IdP)) will
provide a strong indication of the organisational affiliation of a
user.

In the event that RADIUS/UDP is being used instead of RADIUS/TLS,
intermediate proxies between the acceptor and IdP have access to the
EAP MSK. Knowledge of the MSK could facilitate the compromise of the
GSS context, which is derived from this key, potentially allowing
decryption of the GSS session.

EAP method
----------

The EAP methods most commonly used with {{RFC7055}} use X.509 server
certificates to authenticate the IdP. This certificate will include
information identifying the IdP's server.

A passive observer may also be able to fingerprint the EAP
implementation [FIXME].

GSS-API data
------------

A variety of information is available at the GSS-API layer.

- The acceptor name is carried in name requests and responses during
the initial phase. This can be used for fingerprinting users since it
indicates what service is requested and supplied. In settings where
the endpoint's IP addresses and other identifying information don't
link the user to the service, exposing the acceptor name is
detrimental to privacy.

- GSS channel bindings are also available in the extensions state;
these bindings typically identify the acceptor to the initiator.

- The currently defined flags leak information about which application
protocol is being used and pose a threat to user privacy. Future flags
might increase this threat.

- Finally the mechanism MIC is also exposed and error subtokens are
also exposed [FIXME].


Solution {#solution}
========

Generate a Diffie-Hellman key in the initial state of the context
establishment and use it to encrypt other context tokens. Note that
the DH key, shared by initiator and acceptor, is unique per GSS-API
session, not per context token. [Elaborate on why?]

[describe where in initial the DH key exchange happens and how; point
at general description? copy from existing standard?]

[ describe how we signal algorithm and key size ]

[ describe the use of a nonce/sequence number for temporality, either
in the key or in the payload, covered by the MIC and verified by the
other end -- mitigates replay, reflection and reordering attacks ]

[ describe how we derive a symmetric key from the DH key and encrypt
the context token (perhaps in a GSS "wrap token"?) ]

[ describe how to mix in the DH key with the MSK to form the CRK (7055
sect 6) -- this will make a MITM kexing with both ends unable to
create a MIC which validates properly (and a MITM relaying DH kex will
not know the key and thus not the CRK) ]

Why do this at the GSS-EAP layer {#why-in-gss-eap}
--------------------------------

Using a short lived key for providing confidentiality between an ABFAB
client and the IdP could arguably be done at the EAP layer rather than
at the GSS-API layer. A general solution for EAP would give better
protocol reuse.

EAP methods run between the EAP peer and server. A Diffie-Hellman key
exchange between these endpoints can not start with the first message
sent from the client since the client doesn't talk to the EAP server
(the IdP) directly and can not be helped with doing that until the EAP
authenticator knows where the IdP is to be found. Most of the
mentioned leaks at the GSS-API layer would thus still be present in
this solution.

[ maybe expand on how TEAP [draft-ietf-emu-eap-tunnel-method] could
solve the problem of AAA proxies learning the MSK, impersonating the
RP ]


Keying algorithm {#keying}
================

This section defines an algorithm, based on the Diffie-Hellman
protocol, enabling the initiator and acceptor to negotiate a shared
key during the initial phase of the GSS context establishment. This
key is used to encrypt all subsequent context tokens. The key is
unique per GSS-API session, and is not rotated for each successive
context token.  [Elaborate on why not?]


Costs {#costs}
=====

- This will cost FIXME extra round trips.

- [No new GSS mech. Thus no complexity cost of picking the right one.]


Open questions
==============

- Should we make the ephemeral keying and encryption optional?

  Might have to -- asking the list about breaking backward compatibility.

- Bid down attacks -- detect, prevent

  Fascinating idea from Sam: 6067 CB implementing 5056 CB could
  detect MITM before end of extension state (MIC).

- Include the nonce/sequence number in tokens or fold it into the key?


Security considerations
=======================

TBD


IANA considerations
===================

TBD.


Contributors
============

The whole idea of adding ephemeral keys to ABFAB was suggested by Sam
Hartman who also contributed substantial ideas and discussions on this
subject.
